cmake_minimum_required (VERSION 2.8)

#set(SOURCES
#resources/textureOb.cpp
#resources/TextureManager.cpp
#resources/resources.cpp
#resources/init.cpp

#common/myVector.cpp
#common/myStr.cpp
#common/rand.cpp
#common/gameStruct.cpp
#common/IdGenerator.cpp
#common/rect.cpp
#common/points.cpp
#common/TurnTimer.cpp
#common/Date.cpp
#common/GameDate.cpp

#resources/GuiTextureObCollector.cpp

#gui/Slider.cpp
#common/Logger.cpp
#config/config.cpp

#common/common.cpp
#world/EntityManager.cpp
#common/Collision.cpp

#resources/MeshCollector.cpp
#resources/ShaderCollector.cpp
#resources/GlslLoader.cpp

#common/Base.cpp

#ai/Task.cpp
#ai/MicroTaskManager.cpp
#ai/MacroTaskManager.cpp

#ai/aiModel/AiModelCollector.cpp

#ai/aiModel/BaseAiModel.cpp
#ai/aiModel/AiModelRanger.cpp
#ai/aiModel/AiModelTrader.cpp
#ai/aiModel/AiModelConqueror.cpp

#ai/scenarios/ScenarioCollector.cpp

#ai/scenarios/macro/MacroScenarioSelfSafety.cpp
#ai/scenarios/macro/MacroScenarioStarSystemDefence.cpp
#ai/scenarios/macro/MacroScenarioStarSystemLiberation.cpp

#ai/scenarios/micro/MicroScenarioDestroy.cpp
#ai/scenarios/micro/MicroScenarioGrab.cpp
#ai/scenarios/micro/MicroScenarioJump.cpp
#ai/scenarios/micro/MicroScenarioDocking.cpp
#ai/scenarios/micro/MicroScenarioLaunching.cpp
#ai/scenarios/micro/MicroScenarioExploration.cpp

#ai/scenarios/macro/MacroScenarioGoodsTrading.cpp

#ai/StateMachine.cpp

#render/Screen.cpp
#render/SFML_Wrapper.cpp
#render/Fbo.cpp
#render/Bloom.cpp
#render/Render.cpp
#render/PathVisual.cpp
#render/AnimationEffect2D.cpp

#effects/particlesystem/Particle.cpp
#effects/particlesystem/BaseParticleSystem.cpp

#effects/particlesystem/DamageEffect.cpp
#effects/particlesystem/DriveEffect.cpp
#effects/particlesystem/ExplosionEffect.cpp

#builder/items/equipment/BakEquipmentBuilder.cpp
#builder/items/equipment/DriveEquipmentBuilder.cpp
#builder/items/equipment/DroidEquipmentBuilder.cpp
#builder/items/equipment/EnergizerEquipmentBuilder.cpp
#builder/items/equipment/FreezerEquipmentBuilder.cpp
#builder/items/equipment/GrappleEquipmentBuilder.cpp
#builder/items/equipment/LazerEquipmentBuilder.cpp
#builder/items/equipment/ProtectorEquipmentBuilder.cpp
#builder/items/equipment/RadarEquipmentBuilder.cpp
#builder/items/equipment/RocketEquipmentBuilder.cpp
#builder/items/equipment/ScanerEquipmentBuilder.cpp

#builder/items/modules/DroidModuleBuilder.cpp
#builder/items/modules/RadarModuleBuilder.cpp
#builder/items/modules/DriveModuleBuilder.cpp
#builder/items/modules/BakModuleBuilder.cpp
#builder/items/modules/GrappleModuleBuilder.cpp
#builder/items/modules/LazerModuleBuilder.cpp
#builder/items/modules/ProtectorModuleBuilder.cpp
#builder/items/modules/RocketModuleBuilder.cpp
#builder/items/modules/ScanerModuleBuilder.cpp

#builder/items/artefacts/GravityArtefactBuilder.cpp
#builder/items/artefacts/ProtectorArtefactBuilder.cpp

#builder/items/other/BombBuilder.cpp

#items/BaseItem.cpp
#items/equipment/BaseEquipment.cpp
#items/equipment/RocketEquipment.cpp
#items/equipment/LazerEquipment.cpp
#items/equipment/RadarEquipment.cpp
#items/equipment/DriveEquipment.cpp
#items/equipment/BakEquipment.cpp
#items/equipment/EnergizerEquipment.cpp
#items/equipment/ProtectorEquipment.cpp
#items/equipment/DroidEquipment.cpp
#items/equipment/FreezerEquipment.cpp
#items/equipment/ScanerEquipment.cpp
#items/equipment/GrappleEquipment.cpp

#items/modules/BaseModule.cpp
#items/modules/RocketModule.cpp
#items/modules/LazerModule.cpp
#items/modules/RadarModule.cpp
#items/modules/DriveModule.cpp
#items/modules/BakModule.cpp
#items/modules/EnergizerModule.cpp
#items/modules/ProtectorModule.cpp
#items/modules/DroidModule.cpp
#items/modules/FreezerModule.cpp
#items/modules/ScanerModule.cpp
#items/modules/GrappleModule.cpp

#items/artefacts/GravityArtefact.cpp
#items/artefacts/ProtectorArtefact.cpp

#items/others/GoodsPack.cpp   
#items/others/Bomb.cpp 

#spaceobjects/BaseSpaceEntity.cpp 
#spaceobjects/BasePlanet.cpp
#spaceobjects/Vehicle.cpp
#spaceobjects/BlackHole.cpp
#spaceobjects/Asteroid.cpp 
#spaceobjects/Planet.cpp
#spaceobjects/Star.cpp  
#spaceobjects/Ship.cpp
#spaceobjects/SpaceStation.cpp 
#spaceobjects/Satellite.cpp 
#spaceobjects/Container.cpp    
#spaceobjects/RocketBullet.cpp

#builder/StarBuilder.cpp
#builder/PlanetBuilder.cpp
#builder/AsteroidBuilder.cpp
#builder/BlackHoleBuilder.cpp
#builder/ContainerBuilder.cpp
#builder/BaseVehicleBuilder.cpp
#builder/ShipBuilder.cpp
#builder/RocketBulletBuilder.cpp
#builder/SpaceStationBuilder.cpp
#builder/SatelliteBuilder.cpp

#builder/ItemSlotBuilder.cpp
#builder/VehicleSlotBuilder.cpp
#builder/AngarBuilder.cpp
#builder/StoreBuilder.cpp
#builder/StarSystemBuilder.cpp

#builder/GalaxyBuilder.cpp
#builder/PlayerBuilder.cpp
#builder/NpcBuilder.cpp
#builder/GovermentBuilder.cpp
#builder/ShopBuilder.cpp
#builder/KosmoportBuilder.cpp
#builder/NatureLandBuilder.cpp

#world/God.cpp

#pilots/Player.cpp
#pilots/Npc.cpp           
#pilots/Skills.cpp
#pilots/Observation.cpp 

#slots/BaseSlot.cpp
#slots/ItemSlot.cpp
#slots/VehicleSlot.cpp

#parts/orbit.cpp

#parts/WeaponComplex.cpp
#parts/ProtectionComplex.cpp
#parts/DriveComplex.cpp
#parts/Turrel.cpp

#docking/Room.cpp
#docking/Angar.cpp
#docking/Store.cpp
#docking/Shop.cpp
#docking/Goverment.cpp
#docking/BaseLand.cpp
#docking/Kosmoport.cpp
#docking/NatureLand.cpp

#text/VerticalFlowText.cpp
#text/InfoTable.cpp

#world/galaxy.cpp
#world/starsystem.cpp 

#garbage/garbageEffects.cpp  
#garbage/EntityGarbage.cpp 

#effects/BaseBackGroundEffect.cpp
#effects/DistantNebulaEffect.cpp
#effects/DistantStarEffect.cpp
#effects/lazerTrace.cpp
#effects/Shield.cpp
#effects/ShockWaveEffect.cpp

#gui/BaseGui.cpp
#gui/BaseButton.cpp
#gui/ButtonTrigger.cpp
#gui/ButtonSingle.cpp
#gui/GuiSkills.cpp
#gui/GuiRadar.cpp
#gui/GuiSpace.cpp
#gui/GuiAngar.cpp
#gui/GuiStore.cpp
#gui/GuiShop.cpp
#gui/GuiGoverment.cpp
#gui/GuiVehicle.cpp
#gui/GuiVehicle2.cpp
#gui/GuiGalaxyMap.cpp
#gui/Cursor.cpp
#gui/UserInput.cpp
#gui/GuiKosmoport.cpp   
#gui/GuiNatureLand.cpp	
#gui/GuiManager.cpp

#world/HyperSpace.cpp
#resources/ObjMesh.cpp

#main.cpp
#)

file(GLOB_RECURSE SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp)

add_executable (${PROJECT} ${SOURCES})
target_link_libraries(${PROJECT} sfml-system sfml-graphics sfml-window GL GLU GLEW boost_system)
